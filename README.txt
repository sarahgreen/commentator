Sarah Green
stg2117
stg2117@columbia.edu

COMS 4170
User Interface Design
Fall 2014
Assignment #3: Commentator


Instructions
-------------
1. Ensure that my directory contains:
  * images/
    * ascending.png
    * descending.png
    * favicon.png
    * paper.jpg
    * starEmpty.png
    * starFull.png
  * index.html
  * masonry.pkgd.min.js
  * README.txt
  * script.js
  * styles.css

2. Open index.html and begin using the app as desired.


Description of Design
----------------------
My approach to this assignment was based on using appropriate aesthetics, 
providing thorough help/support documentation, and preventing errors. The overall 
aethetic was meant to be minimalist, while still whimsically playing off 
the "newspaper" look of the New York Times. I chose a header font and monospace 
font that I felt recalled the look of hardcopy newspapers. The background is a 
newspaper collage, whose opacity I altered so make it less distracting. I also 
included a fun sub-header with the app's motto of "All the Comments You Want 
to Read", a play on the NYT's motto of "All the News That's Fit to Print" 
that emphasizes the user as in control of the app. I also included a date/time 
clock in the sub-header to mimic how daily newspapers display the date of 
publication. All the boxes (welcome message, buttons, pop-up modals, and generated 
comments/information blocks) are slightly rounded rectangles to recall the 
look of newspapers while remaining soft. They have box-shadows to help make them pop 
off the background, to make the ease of reading relevant content easier for the user.
I mostly used black/off-white like a newspaper, but added splashes of color 
judiciously, to emphasize clickability and break up blocks of text. For links, I used 
teal, since most users associate underlined blue-ish content with links. I used 
magenta for commenter's names (also clickable) to differentiate it from article links. 
I also used magenta in the leaderboard column header background to make them distinctive. 
For ratings, I used stars that are either empty or filled with yellow, since this 
rating system would be familiar to many users and also features another bright color. 
I chose these teal, magenta, and yellow colors because they are complementary and 
thus increase accessibility/readability for users with impaired vision. They also 
are similar to the inks used in real newspapers. I also used a cute favicon of a 
newspaper to add a professional but whimsical touch. Finally, the whole application is 
responsive to changes in browser size, and symmetrical around the center vertical axis, 
to match industry standards and increase flexibility. With these design choices, 
I tried to meet the heuristics of minimalist aesthetic as well as matching the system 
to the real world (or real newspapers).

For retrieving comments, I wanted to use the two illustrative examples of getting 
comments from a specific day and also getting random comments. The former requires 
user input (prompted with a dialog box, to make it obvious and clear that input is 
needed), while the other does not. In addition, I made it possible to retrieve 
comments from a specific user by clicking on a user's display name in an already- 
generated comment from that user. I felt that this best hid the technical problem of 
alphanumeric ID strings being required for retrieving comments by user, while still 
enabling this type of retrieval. Once comments are generated, I also made it possible 
to access the original article on which that comment was posted, by including the 
article's URL in the HTML block for that comment (the link opens in a new window to 
minimize and recover from errors). Note: the "original article" links do not appear on 
comments generated by searching for comments from a certain user (on clicking their 
display name) because the NYT API does not return the original article URL using this 
type of request. All other functionality is the same across the types of requests, 
to be internally consistent, prevent possible errors, and provide flexibility of use. 
I used a jQuery plugin called "Masonry" to display the blocks with comments and 
relevant information as a responsive grid that places elements in an optimal spot 
based on available vertical space. I liked the smooth, modern look of this grid. 
Multiple requests in the same session (triggered by multiple button/display name clicks) 
prepend new comment blocks in the Masonry grid, so the page gets longer and longer 
as more comments are retrieved. This avoids a complicated numerical pagination system, 
while keeping the newest comments at the top for ease of reading. 

My rating system is implemented with "stars". Each comment block starts out with four empty 
stars. The user can click these stars to give the comment a rating. Clicking an empty star 
fills up to that star, while clicking a full star empties all stars after and including 
that one. This way, it is possible to give a rating of zero, one, two, three, or four. 
The document graphically fills and empties stars to emphasize recognition over recall as 
the user changes the ratings on comments. My implementation of a "running summary of rated 
comments" is a leaderboard in a pop-up modal that is linked in the persistent footer, which 
remains visible no matter how the user scrolls. This way the leaderboard is always available. 
In the leaderboard, there is a brief snippet of the comment (to ensure that the multi-paragraph 
responses are referenced in a reasonable manner), the comment author (display name), 
and the user's rating of that comment. I used a sorting function to make it possible to 
sort the leaderboard alphabetically by author name or numerically by rating, ascending 
or descending, to give a greater sense of user freedom and flexible usage. 

Lastly, I provided extensive/interactive help and support documentation, as well as a 
welcome message with tips for getting started. These inclusions promote the heuristics 
of "help and documentation" and "flexibility and efficiency of use" for novice/expert 
users alike. There is a link in the persistent footer to help and support, titled 
"Need help?" to match real-world language and phrasing. Here, there is a listing of 
help topics as well as a (fictional) email address in case the user's question is not 
addressed here. There is also a brief description of this assignment, for transparency. 
On clicking one of the help topics, the list of topics disappears and a relevant solution 
is provided. There is also a back link to go back to the list of topics. In addition to 
this interactive listing of topics/solutions, there is also a welcome message displayed 
on page load with tips for getting started. I used a jQuery transition to have this 
message slide in, to make it clear that it's not necessarily a permanent element on the page. 
Here, a description of the app, instructions for getting started, and helpful tips are 
displayed for the novice user who may be overwhelmed on first loading the page. An 
expert user could simply ignore this message without needing to close any boxes, etc. 
I felt that between this message and the help modal, the heuristic of "help and 
documentation" was adequately met.
